2024-10-14T21:52:24.7752289Z ##[group]Run cargo fmt --check
2024-10-14T21:52:24.7752851Z [36;1mcargo fmt --check[0m
2024-10-14T21:52:24.7812347Z shell: /usr/bin/bash -e {0}
2024-10-14T21:52:24.7812713Z env:
2024-10-14T21:52:24.7813031Z   CARGO_TERM_COLOR: always
2024-10-14T21:52:24.7813525Z   CARGO_INCREMENTAL: 0
2024-10-14T21:52:24.7813903Z   CARGO_PROFILE_DEV_DEBUG: 0
2024-10-14T21:52:24.7814387Z   RUST_BACKTRACE: short
2024-10-14T21:52:24.7814726Z   RUSTFLAGS: -D warnings
2024-10-14T21:52:24.7815117Z   CARGO_UNSTABLE_SPARSE_REGISTRY: true
2024-10-14T21:52:24.7815675Z   CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
2024-10-14T21:52:24.7816128Z   CACHE_ON_FAILURE: true
2024-10-14T21:52:24.7816502Z ##[endgroup]
2024-10-14T21:52:25.1631604Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/db.rs:1:
2024-10-14T21:52:25.1655180Z -use serde::{Serialize, Deserialize};
2024-10-14T21:52:25.1656662Z -use chrono::{DateTime, Utc};
2024-10-14T21:52:25.1657675Z -use aws_sdk_dynamodb::{Client, Error};
2024-10-14T21:52:25.1658587Z -use aws_sdk_dynamodb::model::AttributeValue;
2024-10-14T21:52:25.1659820Z -use aws_config::meta::region::RegionProviderChain;
2024-10-14T21:52:25.1660789Z  use aws_config::load_from_env;
2024-10-14T21:52:25.1661609Z -use tracing::{info, error};
2024-10-14T21:52:25.1662293Z +use aws_config::meta::region::RegionProviderChain;
2024-10-14T21:52:25.1663278Z +use aws_sdk_dynamodb::model::AttributeValue;
2024-10-14T21:52:25.1664041Z +use aws_sdk_dynamodb::{Client, Error};
2024-10-14T21:52:25.1664903Z +use chrono::{DateTime, Utc};
2024-10-14T21:52:25.1665612Z +use serde::{Deserialize, Serialize};
2024-10-14T21:52:25.1666421Z +use tracing::{error, info};
2024-10-14T21:52:25.1667082Z  
2024-10-14T21:52:25.1667647Z -
2024-10-14T21:52:25.1668467Z  pub async fn get_dynamodb_client() -> Client {
2024-10-14T21:52:25.1669340Z      // Set up the region provider
2024-10-14T21:52:25.1670552Z      let region_provider = RegionProviderChain::default_provider().or_else("eu-north-1");
2024-10-14T21:52:25.1672840Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/db.rs:29:
2024-10-14T21:52:25.1674969Z  #[derive(Debug, Serialize, Deserialize, Clone)]
2024-10-14T21:52:25.1675822Z  pub struct Invite {
2024-10-14T21:52:25.1676455Z      pub code: String,
2024-10-14T21:52:25.1677625Z -    pub invitor_id: String, // ID of the user who created the invite
2024-10-14T21:52:25.1679049Z -    pub invite_count: u32, // Number of invitees registered using this invite
2024-10-14T21:52:25.1680248Z +    pub invitor_id: String,        // ID of the user who created the invite
2024-10-14T21:52:25.1681663Z +    pub invite_count: u32,         // Number of invitees registered using this invite
2024-10-14T21:52:25.1682923Z      pub created_at: DateTime<Utc>, // Date when invite was created
2024-10-14T21:52:25.1683943Z  }
2024-10-14T21:52:25.1684444Z  
2024-10-14T21:52:25.1685793Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/db.rs:37:
2024-10-14T21:52:25.1687968Z -
2024-10-14T21:52:25.1688465Z -
2024-10-14T21:52:25.1689485Z  pub async fn save_user(client: &Client, user: &User) -> Result<(), Error> {
2024-10-14T21:52:25.1690521Z      info!("here i am");
2024-10-14T21:52:25.1691251Z      client
2024-10-14T21:52:25.1692521Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/db.rs:42:
2024-10-14T21:52:25.1693869Z -    	.put_item()
2024-10-14T21:52:25.1694250Z +        .put_item()
2024-10-14T21:52:25.1694694Z          .table_name("User")
2024-10-14T21:52:25.1695144Z          .item("id", AttributeValue::S(user.id.clone()))
2024-10-14T21:52:25.1695746Z          .item("invite_code", AttributeValue::S(user.invite_code.clone()))
2024-10-14T21:52:25.1697437Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/db.rs:47:
2024-10-14T21:52:25.1698699Z          .item("duress_pin", AttributeValue::S(user.duress_pin.clone()))
2024-10-14T21:52:25.1699339Z          .send()
2024-10-14T21:52:25.1699684Z          .await?;
2024-10-14T21:52:25.1700054Z -    
2024-10-14T21:52:25.1700458Z +
2024-10-14T21:52:25.1700748Z      Ok(())
2024-10-14T21:52:25.1701735Z  }
2024-10-14T21:52:25.1702378Z  
2024-10-14T21:52:25.1703723Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/db.rs:54:
2024-10-14T21:52:25.1705831Z  pub async fn save_invite(client: &Client, invite: &Invite) -> Result<(), Error> {
2024-10-14T21:52:25.1706474Z      info!("here i am");
2024-10-14T21:52:25.1706930Z      client
2024-10-14T21:52:25.1707276Z -    	.put_item()
2024-10-14T21:52:25.1707596Z +        .put_item()
2024-10-14T21:52:25.1708143Z          .table_name("Invite")
2024-10-14T21:52:25.1708883Z          .item("code", AttributeValue::S(invite.code.clone()))
2024-10-14T21:52:25.1709527Z          .item("invitor_id", AttributeValue::S(invite.invitor_id.clone()))
2024-10-14T21:52:25.1710689Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/db.rs:61:
2024-10-14T21:52:25.1712221Z -        .item("invite_count", AttributeValue::N(invite.invite_count.to_string()))
2024-10-14T21:52:25.1713298Z -        .item("created_at", AttributeValue::S(invite.created_at.to_rfc3339()))
2024-10-14T21:52:25.1714261Z +        .item(
2024-10-14T21:52:25.1714807Z +            "invite_count",
2024-10-14T21:52:25.1715318Z +            AttributeValue::N(invite.invite_count.to_string()),
2024-10-14T21:52:25.1715770Z +        )
2024-10-14T21:52:25.1716150Z +        .item(
2024-10-14T21:52:25.1716499Z +            "created_at",
2024-10-14T21:52:25.1716949Z +            AttributeValue::S(invite.created_at.to_rfc3339()),
2024-10-14T21:52:25.1717506Z +        )
2024-10-14T21:52:25.1717872Z          .send()
2024-10-14T21:52:25.1718416Z          .await?;
2024-10-14T21:52:25.1718860Z  
2024-10-14T21:52:25.1719676Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/db.rs:67:
2024-10-14T21:52:25.1720861Z  }
2024-10-14T21:52:25.1721151Z  
2024-10-14T21:52:25.1722290Z  pub async fn get_invite(client: &Client, code: &str) -> Result<Option<Invite>, Error> {
2024-10-14T21:52:25.1723030Z -    let result = client.get_item()
2024-10-14T21:52:25.1723417Z +    let result = client
2024-10-14T21:52:25.1723893Z +        .get_item()
2024-10-14T21:52:25.1724249Z          .table_name("Invite")
2024-10-14T21:52:25.1724732Z          .key("code", AttributeValue::S(code.to_string()))
2024-10-14T21:52:25.1725270Z          .send()
2024-10-14T21:52:25.1726497Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/db.rs:75:
2024-10-14T21:52:25.1727915Z  
2024-10-14T21:52:25.1728309Z      if let Some(item) = result.item {
2024-10-14T21:52:25.1728839Z          let invite = Invite {
2024-10-14T21:52:25.1729309Z -            code: item.get("code")
2024-10-14T21:52:25.1729696Z +            code: item
2024-10-14T21:52:25.1730121Z +                .get("code")
2024-10-14T21:52:25.1730619Z                  .and_then(|v| v.as_s().ok())
2024-10-14T21:52:25.1731389Z                  .map(|s| s.to_string())
2024-10-14T21:52:25.1731947Z                  .unwrap_or_else(String::new),
2024-10-14T21:52:25.1732903Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/db.rs:82:
2024-10-14T21:52:25.1734280Z -            invitor_id: item.get("invitor_id")
2024-10-14T21:52:25.1735047Z +            invitor_id: item
2024-10-14T21:52:25.1735538Z +                .get("invitor_id")
2024-10-14T21:52:25.1735987Z                  .and_then(|v| v.as_s().ok())
2024-10-14T21:52:25.1736390Z                  .map(|s| s.to_string())
2024-10-14T21:52:25.1736896Z                  .unwrap_or_else(String::new),
2024-10-14T21:52:25.1737990Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/db.rs:86:
2024-10-14T21:52:25.1739597Z -            invite_count: item.get("invite_count")
2024-10-14T21:52:25.1740066Z +            invite_count: item
2024-10-14T21:52:25.1740499Z +                .get("invite_count")
2024-10-14T21:52:25.1740954Z                  .and_then(|v| v.as_n().ok())
2024-10-14T21:52:25.1741454Z                  .and_then(|n| n.parse::<u32>().ok())
2024-10-14T21:52:25.1742358Z                  .unwrap_or(0),
2024-10-14T21:52:25.1743272Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/db.rs:90:
2024-10-14T21:52:25.1744841Z -            created_at: item.get("created_at")
2024-10-14T21:52:25.1745303Z +            created_at: item
2024-10-14T21:52:25.1745819Z +                .get("created_at")
2024-10-14T21:52:25.1746559Z                  .and_then(|v| v.as_s().ok())
2024-10-14T21:52:25.1747507Z                  .map(|v| DateTime::parse_from_rfc3339(v).unwrap().with_timezone(&Utc))
2024-10-14T21:52:25.1748573Z                  .unwrap_or(Utc::now()),
2024-10-14T21:52:25.1750170Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/db.rs:99:
2024-10-14T21:52:25.1751969Z  }
2024-10-14T21:52:25.1752513Z  
2024-10-14T21:52:25.1753585Z  pub async fn get_user_invites(client: &Client, user_id: &str) -> Result<Vec<Invite>, Error> {
2024-10-14T21:52:25.1754718Z -    let result = client.scan()
2024-10-14T21:52:25.1755470Z +    let result = client
2024-10-14T21:52:25.1756280Z +        .scan()
2024-10-14T21:52:25.1756806Z          .table_name("Invite")
2024-10-14T21:52:25.1757587Z          .filter_expression("invitor_id = :id")
2024-10-14T21:52:25.1758573Z          .expression_attribute_values(":id", AttributeValue::S(user_id.to_string()))
2024-10-14T21:52:25.1760458Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/db.rs:106:
2024-10-14T21:52:25.1762299Z          .send()
2024-10-14T21:52:25.1762931Z          .await?;
2024-10-14T21:52:25.1763427Z  
2024-10-14T21:52:25.1764205Z -    let invites = result.items.unwrap_or_default()
2024-10-14T21:52:25.1765068Z +    let invites = result
2024-10-14T21:52:25.1765591Z +        .items
2024-10-14T21:52:25.1766134Z +        .unwrap_or_default()
2024-10-14T21:52:25.1766806Z          .into_iter()
2024-10-14T21:52:25.1767375Z          .map(|item| Invite {
2024-10-14T21:52:25.1768260Z -            code: item.get("code")
2024-10-14T21:52:25.1768958Z +            code: item
2024-10-14T21:52:25.1769555Z +                .get("code")
2024-10-14T21:52:25.1770201Z                  .and_then(|v| v.as_s().ok())
2024-10-14T21:52:25.1771009Z                  .map(|s| s.to_string())
2024-10-14T21:52:25.1771800Z                  .unwrap_or_else(String::new),
2024-10-14T21:52:25.1773329Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/db.rs:116:
2024-10-14T21:52:25.1774717Z -            invitor_id: item.get("invitor_id")
2024-10-14T21:52:25.1775265Z +            invitor_id: item
2024-10-14T21:52:25.1775678Z +                .get("invitor_id")
2024-10-14T21:52:25.1776099Z                  .and_then(|v| v.as_s().ok())
2024-10-14T21:52:25.1776568Z                  .map(|s| s.to_string())
2024-10-14T21:52:25.1777034Z                  .unwrap_or_else(String::new),
2024-10-14T21:52:25.1778052Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/db.rs:120:
2024-10-14T21:52:25.1779565Z -            invite_count: item.get("invite_count")
2024-10-14T21:52:25.1780395Z +            invite_count: item
2024-10-14T21:52:25.1781036Z +                .get("invite_count")
2024-10-14T21:52:25.1781730Z                  .and_then(|v| v.as_n().ok())
2024-10-14T21:52:25.1782252Z                  .and_then(|n| n.parse::<u32>().ok())
2024-10-14T21:52:25.1782714Z                  .unwrap_or(0),
2024-10-14T21:52:25.1783699Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/db.rs:124:
2024-10-14T21:52:25.1785052Z -            created_at: item.get("created_at")
2024-10-14T21:52:25.1785545Z +            created_at: item
2024-10-14T21:52:25.1785948Z +                .get("created_at")
2024-10-14T21:52:25.1786465Z                  .and_then(|v| v.as_s().ok())
2024-10-14T21:52:25.1787045Z                  .map(|v| DateTime::parse_from_rfc3339(v).unwrap().with_timezone(&Utc))
2024-10-14T21:52:25.1787620Z                  .unwrap_or(Utc::now()),
2024-10-14T21:52:25.1788591Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/db.rs:133:
2024-10-14T21:52:25.1789770Z  
2024-10-14T21:52:25.1790360Z  pub async fn update_invite(client: &Client, invite: &Invite) -> Result<(), Error> {
2024-10-14T21:52:25.1790967Z      client
2024-10-14T21:52:25.1791365Z -    	.update_item()
2024-10-14T21:52:25.1791938Z +        .update_item()
2024-10-14T21:52:25.1792330Z          .table_name("Invite")
2024-10-14T21:52:25.1792879Z          .key("code", AttributeValue::S(invite.code.clone()))
2024-10-14T21:52:25.1793736Z -        .update_expression("SET invitor_id = :invitor_id, invite_count = :invite_count, created_at = :created_at")
2024-10-14T21:52:25.1794444Z +        .update_expression(
2024-10-14T21:52:25.1795056Z +            "SET invitor_id = :invitor_id, invite_count = :invite_count, created_at = :created_at",
2024-10-14T21:52:25.1795659Z +        )
2024-10-14T21:52:25.1796215Z          .expression_attribute_values(":invitor_id", AttributeValue::S(invite.invitor_id.clone()))
2024-10-14T21:52:25.1797290Z -        .expression_attribute_values(":invite_count", AttributeValue::N(invite.invite_count.to_string()))
2024-10-14T21:52:25.1798563Z -        .expression_attribute_values(":created_at", AttributeValue::S(invite.created_at.to_rfc3339()))
2024-10-14T21:52:25.1799319Z +        .expression_attribute_values(
2024-10-14T21:52:25.1799728Z +            ":invite_count",
2024-10-14T21:52:25.1800221Z +            AttributeValue::N(invite.invite_count.to_string()),
2024-10-14T21:52:25.1800771Z +        )
2024-10-14T21:52:25.1801130Z +        .expression_attribute_values(
2024-10-14T21:52:25.1801550Z +            ":created_at",
2024-10-14T21:52:25.1802037Z +            AttributeValue::S(invite.created_at.to_rfc3339()),
2024-10-14T21:52:25.1802539Z +        )
2024-10-14T21:52:25.1802848Z          .send()
2024-10-14T21:52:25.1803240Z          .await?;
2024-10-14T21:52:25.1803574Z  
2024-10-14T21:52:25.1804791Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/duress_db.rs:1:
2024-10-14T21:52:25.1805940Z  // duress_db.rs
2024-10-14T21:52:25.1806461Z -use std::fs::{OpenOptions};
2024-10-14T21:52:25.1806947Z -use std::io::{Write, BufRead, BufReader};
2024-10-14T21:52:25.1807466Z -use serde::{Serialize, Deserialize};
2024-10-14T21:52:25.1808265Z -use tokio::sync::Mutex;
2024-10-14T21:52:25.1808682Z  use lazy_static::lazy_static;
2024-10-14T21:52:25.1809112Z +use serde::{Deserialize, Serialize};
2024-10-14T21:52:25.1809640Z +use std::fs::OpenOptions;
2024-10-14T21:52:25.1810016Z  use std::io::Error;
2024-10-14T21:52:25.1810387Z +use std::io::{BufRead, BufReader, Write};
2024-10-14T21:52:25.1810903Z +use tokio::sync::Mutex;
2024-10-14T21:52:25.1811264Z  // duress_db.rs
2024-10-14T21:52:25.1811708Z  use crate::duress_handlers::MapInfo;
2024-10-14T21:52:25.1812110Z  
2024-10-14T21:52:25.1813006Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/duress_db.rs:11:
2024-10-14T21:52:25.1814264Z -
2024-10-14T21:52:25.1814590Z -
2024-10-14T21:52:25.1814971Z  lazy_static! {
2024-10-14T21:52:25.1815357Z      static ref FILE_MUTEX: Mutex<()> = Mutex::new(());
2024-10-14T21:52:25.1815831Z  }
2024-10-14T21:52:25.1816771Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/duress_db.rs:24:
2024-10-14T21:52:25.1817967Z  }
2024-10-14T21:52:25.1818282Z  
2024-10-14T21:52:25.1818557Z  // Log a duress event
2024-10-14T21:52:25.1819413Z -pub async fn log_duress_event(user_id: &str, duress_type: &str, message: &str, timestamp: &str) -> Result<(), Error> {
2024-10-14T21:52:25.1820180Z +pub async fn log_duress_event(
2024-10-14T21:52:25.1820580Z +    user_id: &str,
2024-10-14T21:52:25.1821002Z +    duress_type: &str,
2024-10-14T21:52:25.1821349Z +    message: &str,
2024-10-14T21:52:25.1821707Z +    timestamp: &str,
2024-10-14T21:52:25.1822157Z +) -> Result<(), Error> {
2024-10-14T21:52:25.1822586Z      let _guard = FILE_MUTEX.lock().await;
2024-10-14T21:52:25.1823125Z      let mut file = OpenOptions::new()
2024-10-14T21:52:25.1823533Z          .create(true)
2024-10-14T21:52:25.1824443Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/duress_db.rs:91:
2024-10-14T21:52:25.1825645Z  }
2024-10-14T21:52:25.1825937Z  
2024-10-14T21:52:25.1826346Z  // Update user preferences
2024-10-14T21:52:25.1827068Z -pub async fn update_user_preferences(user_id: &str, preferences: UserPreferences) -> Result<(), Error> {
2024-10-14T21:52:25.1827988Z +pub async fn update_user_preferences(
2024-10-14T21:52:25.1828505Z +    user_id: &str,
2024-10-14T21:52:25.1828872Z +    preferences: UserPreferences,
2024-10-14T21:52:25.1829403Z +) -> Result<(), Error> {
2024-10-14T21:52:25.1829776Z      let _guard = FILE_MUTEX.lock().await;
2024-10-14T21:52:25.1830192Z  
2024-10-14T21:52:25.1830687Z      // Placeholder: Logic to update preferences in a real storage
2024-10-14T21:52:25.1831829Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/duress_handlers.rs:1:
2024-10-14T21:52:25.1833130Z  // duress_handlers.rs
2024-10-14T21:52:25.1833526Z +use crate::duress_db::{self, UserPreferences};
2024-10-14T21:52:25.1834034Z  use actix_web::{web, HttpResponse};
2024-10-14T21:52:25.1834546Z  use serde::{Deserialize, Serialize};
2024-10-14T21:52:25.1835302Z -use crate::duress_db::{self,UserPreferences};
2024-10-14T21:52:25.1835828Z  
2024-10-14T21:52:25.1836120Z  #[derive(Debug, Deserialize)]
2024-10-14T21:52:25.1836546Z  pub struct DuressRequest {
2024-10-14T21:52:25.1837646Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/duress_handlers.rs:26:
2024-10-14T21:52:25.1838848Z      pub last_checkin: String,
2024-10-14T21:52:25.1839296Z  }
2024-10-14T21:52:25.1839573Z  
2024-10-14T21:52:25.1839885Z -
2024-10-14T21:52:25.1840262Z -
2024-10-14T21:52:25.1840577Z  // POST /users/{user_id}/duress
2024-10-14T21:52:25.1841358Z -pub async fn trigger_duress(path: web::Path<String>, req: web::Json<DuressRequest>) -> HttpResponse {
2024-10-14T21:52:25.1842153Z +pub async fn trigger_duress(
2024-10-14T21:52:25.1842557Z +    path: web::Path<String>,
2024-10-14T21:52:25.1843036Z +    req: web::Json<DuressRequest>,
2024-10-14T21:52:25.1843502Z +) -> HttpResponse {
2024-10-14T21:52:25.1843845Z      let user_id = path.into_inner();
2024-10-14T21:52:25.1844306Z  
2024-10-14T21:52:25.1844711Z      // Placeholder: Notify followers and nearby users
2024-10-14T21:52:25.1845788Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/duress_handlers.rs:40:
2024-10-14T21:52:25.1847061Z  }
2024-10-14T21:52:25.1847313Z  
2024-10-14T21:52:25.1848055Z  // POST /users/{user_id}/duress/cancel
2024-10-14T21:52:25.1848965Z -pub async fn cancel_duress(path: web::Path<String>, req: web::Json<CancelDuressRequest>) -> HttpResponse {
2024-10-14T21:52:25.1849794Z +pub async fn cancel_duress(
2024-10-14T21:52:25.1850200Z +    path: web::Path<String>,
2024-10-14T21:52:25.1850588Z +    req: web::Json<CancelDuressRequest>,
2024-10-14T21:52:25.1851153Z +) -> HttpResponse {
2024-10-14T21:52:25.1851543Z      let user_id = path.into_inner();
2024-10-14T21:52:25.1851966Z  
2024-10-14T21:52:25.1852331Z      if req.confirm {
2024-10-14T21:52:25.1853309Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/duress_handlers.rs:85:
2024-10-14T21:52:25.1854563Z  }
2024-10-14T21:52:25.1854878Z  
2024-10-14T21:52:25.1855287Z  // PATCH /users/{user_id}/preferences
2024-10-14T21:52:25.1856153Z -pub async fn update_preferences(path: web::Path<String>, req: web::Json<UserPreferences>) -> HttpResponse {
2024-10-14T21:52:25.1856879Z +pub async fn update_preferences(
2024-10-14T21:52:25.1857371Z +    path: web::Path<String>,
2024-10-14T21:52:25.1857828Z +    req: web::Json<UserPreferences>,
2024-10-14T21:52:25.1858297Z +) -> HttpResponse {
2024-10-14T21:52:25.1858738Z      let user_id = path.into_inner();
2024-10-14T21:52:25.1859100Z  
2024-10-14T21:52:25.1859590Z      match duress_db::update_user_preferences(&user_id, req.into_inner()).await {
2024-10-14T21:52:25.1860885Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/duress_handlers.rs:93:
2024-10-14T21:52:25.1862288Z          Err(err) => HttpResponse::InternalServerError().body(err.to_string()),
2024-10-14T21:52:25.1862858Z      }
2024-10-14T21:52:25.1863117Z  }
2024-10-14T21:52:25.1863511Z -
2024-10-14T21:52:25.1863825Z  
2024-10-14T21:52:25.1864652Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/follow_db.rs:1:
2024-10-14T21:52:25.1866007Z -use aws_sdk_dynamodb::{Client, Error};
2024-10-14T21:52:25.1866652Z  use aws_sdk_dynamodb::model::AttributeValue;
2024-10-14T21:52:25.1867300Z -use serde::{Serialize, Deserialize};
2024-10-14T21:52:25.1867785Z -use tracing::{info, error};
2024-10-14T21:52:25.1868281Z +use aws_sdk_dynamodb::{Client, Error};
2024-10-14T21:52:25.1868734Z +use serde::{Deserialize, Serialize};
2024-10-14T21:52:25.1869129Z +use tracing::{error, info};
2024-10-14T21:52:25.1869599Z  use uuid::Uuid;
2024-10-14T21:52:25.1869920Z  
2024-10-14T21:52:25.1870221Z -
2024-10-14T21:52:25.1870652Z  #[derive(Debug, Serialize, Deserialize, Clone)]
2024-10-14T21:52:25.1871087Z  pub struct Follow {
2024-10-14T21:52:25.1871470Z      pub follower_id: String,
2024-10-14T21:52:25.1872501Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/follow_db.rs:12:
2024-10-14T21:52:25.1873731Z  }
2024-10-14T21:52:25.1874194Z  
2024-10-14T21:52:25.1874615Z  // Adds a new follow relationship to the DynamoDB "Follow" table
2024-10-14T21:52:25.1875593Z -pub async fn add_follow(client: &Client, follower_id: &str, followed_id: &str) -> Result<(), Error> {
2024-10-14T21:52:25.1876286Z +pub async fn add_follow(
2024-10-14T21:52:25.1876679Z +    client: &Client,
2024-10-14T21:52:25.1877110Z +    follower_id: &str,
2024-10-14T21:52:25.1877461Z +    followed_id: &str,
2024-10-14T21:52:25.1877856Z +) -> Result<(), Error> {
2024-10-14T21:52:25.1878367Z      info!("Adding a follow relationship in DynamoDB");
2024-10-14T21:52:25.1878847Z  
2024-10-14T21:52:25.1879145Z      client
2024-10-14T21:52:25.1880100Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/follow_db.rs:19:
2024-10-14T21:52:25.1881364Z -    	.put_item()
2024-10-14T21:52:25.1881730Z +        .put_item()
2024-10-14T21:52:25.1882086Z          .table_name("Follow")
2024-10-14T21:52:25.1882623Z          .item("id", AttributeValue::S(Uuid::new_v4().to_string()))
2024-10-14T21:52:25.1883291Z          .item("follower_id", AttributeValue::S(follower_id.to_string()))
2024-10-14T21:52:25.1884454Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/follow_db.rs:23:
2024-10-14T21:52:25.1885730Z          .item("followed_id", AttributeValue::S(followed_id.to_string()))
2024-10-14T21:52:25.1886340Z          .send()
2024-10-14T21:52:25.1886669Z          .await?;
2024-10-14T21:52:25.1886982Z -    
2024-10-14T21:52:25.1887365Z +
2024-10-14T21:52:25.1887658Z      Ok(())
2024-10-14T21:52:25.1888199Z  }
2024-10-14T21:52:25.1888550Z  
2024-10-14T21:52:25.1889453Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/follow_db.rs:30:
2024-10-14T21:52:25.1890830Z  // Removes a follow relationship from the DynamoDB "Follow" table
2024-10-14T21:52:25.1891743Z -pub async fn remove_follow(client: &Client, follower_id: &str, followed_id: &str) -> Result<(), Error> {
2024-10-14T21:52:25.1892524Z +pub async fn remove_follow(
2024-10-14T21:52:25.1892880Z +    client: &Client,
2024-10-14T21:52:25.1893254Z +    follower_id: &str,
2024-10-14T21:52:25.1893698Z +    followed_id: &str,
2024-10-14T21:52:25.1894091Z +) -> Result<(), Error> {
2024-10-14T21:52:25.1894560Z      info!("Removing a follow relationship in DynamoDB");
2024-10-14T21:52:25.1895053Z  
2024-10-14T21:52:25.1895346Z      client
2024-10-14T21:52:25.1896298Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/follow_db.rs:35:
2024-10-14T21:52:25.1897480Z -    	.delete_item()
2024-10-14T21:52:25.1897961Z +        .delete_item()
2024-10-14T21:52:25.1898345Z          .table_name("Follow")
2024-10-14T21:52:25.1898847Z          .key("follower_id", AttributeValue::S(follower_id.to_string()))
2024-10-14T21:52:25.1899556Z          .key("followed_id", AttributeValue::S(followed_id.to_string()))
2024-10-14T21:52:25.1900649Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/follow_db.rs:39:
2024-10-14T21:52:25.1901840Z          .send()
2024-10-14T21:52:25.1902185Z          .await?;
2024-10-14T21:52:25.1902497Z -    
2024-10-14T21:52:25.1902888Z +
2024-10-14T21:52:25.1903183Z      Ok(())
2024-10-14T21:52:25.1903550Z  }
2024-10-14T21:52:25.1903817Z  
2024-10-14T21:52:25.1904667Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/follow_db.rs:46:
2024-10-14T21:52:25.1906400Z  pub async fn get_follows(client: &Client, followed_id: &str) -> Result<Vec<Follow>, Error> {
2024-10-14T21:52:25.1907104Z      info!("Fetching follows for a given followed_id");
2024-10-14T21:52:25.1907655Z  
2024-10-14T21:52:25.1907974Z -    let result = client.scan()
2024-10-14T21:52:25.1908506Z +    let result = client
2024-10-14T21:52:25.1908941Z +        .scan()
2024-10-14T21:52:25.1909286Z          .table_name("Follow")
2024-10-14T21:52:25.1909816Z          .filter_expression("followed_id = :followed_id")
2024-10-14T21:52:25.1910485Z          .expression_attribute_values(":followed_id", AttributeValue::S(followed_id.to_string()))
2024-10-14T21:52:25.1911684Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/follow_db.rs:53:
2024-10-14T21:52:25.1913106Z          .send()
2024-10-14T21:52:25.1913440Z          .await?;
2024-10-14T21:52:25.1913828Z  
2024-10-14T21:52:25.1914235Z -    let follows = result.items.unwrap_or_default()
2024-10-14T21:52:25.1914719Z +    let follows = result
2024-10-14T21:52:25.1915151Z +        .items
2024-10-14T21:52:25.1915506Z +        .unwrap_or_default()
2024-10-14T21:52:25.1915955Z          .into_iter()
2024-10-14T21:52:25.1916287Z          .map(|item| Follow {
2024-10-14T21:52:25.1916770Z -            followed_id: item.get("followed_id")
2024-10-14T21:52:25.1917290Z +            followed_id: item
2024-10-14T21:52:25.1917701Z +                .get("followed_id")
2024-10-14T21:52:25.1918135Z                  .and_then(|v| v.as_s().ok())
2024-10-14T21:52:25.1918619Z                  .map(|s| s.to_string())
2024-10-14T21:52:25.1919092Z                  .unwrap_or_else(String::new),
2024-10-14T21:52:25.1920156Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/follow_db.rs:63:
2024-10-14T21:52:25.1921495Z -            follower_id: item.get("follower`1   _id")
2024-10-14T21:52:25.1922046Z +            follower_id: item
2024-10-14T21:52:25.1922526Z +                .get("follower`1   _id")
2024-10-14T21:52:25.1922946Z                  .and_then(|v| v.as_s().ok())
2024-10-14T21:52:25.1923454Z                  .map(|s| s.to_string())
2024-10-14T21:52:25.1923906Z                  .unwrap_or_else(String::new),
2024-10-14T21:52:25.1925012Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/follow_handlers.rs:1:
2024-10-14T21:52:25.1926210Z +use crate::follow_db;
2024-10-14T21:52:25.1926648Z  use actix_web::{web, HttpResponse};
2024-10-14T21:52:25.1927159Z -use serde::Deserialize;
2024-10-14T21:52:25.1927637Z  use aws_sdk_dynamodb::Client; // Import the DynamoDB client
2024-10-14T21:52:25.1929116Z -use crate::follow_db;
2024-10-14T21:52:25.1929574Z -use tracing::{info, error};
2024-10-14T21:52:25.1929956Z +use serde::Deserialize;
2024-10-14T21:52:25.1930411Z +use tracing::{error, info};
2024-10-14T21:52:25.1930782Z  
2024-10-14T21:52:25.1931104Z -
2024-10-14T21:52:25.1931445Z  #[derive(Debug, Deserialize)]
2024-10-14T21:52:25.1931852Z  pub struct FollowRequest {
2024-10-14T21:52:25.1932356Z      user_id: String, // ID of the user to follow or unfollow
2024-10-14T21:52:25.1933601Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/follow_handlers.rs:13:
2024-10-14T21:52:25.1934913Z  // POST /users/{user_id}/follow
2024-10-14T21:52:25.1935298Z  pub async fn follow_user(
2024-10-14T21:52:25.1935861Z      client: web::Data<Client>, // Access the DynamoDB client from the app state
2024-10-14T21:52:25.1936594Z -    path: web::Path<String>, 
2024-10-14T21:52:25.1937077Z -    req: web::Json<FollowRequest>
2024-10-14T21:52:25.1937496Z +    path: web::Path<String>,
2024-10-14T21:52:25.1937970Z +    req: web::Json<FollowRequest>,
2024-10-14T21:52:25.1938398Z  ) -> HttpResponse {
2024-10-14T21:52:25.1938790Z      let follower_id = path.into_inner();
2024-10-14T21:52:25.1939322Z      let followed_id = req.user_id.clone();
2024-10-14T21:52:25.1940373Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/follow_handlers.rs:21:
2024-10-14T21:52:25.1941652Z  
2024-10-14T21:52:25.1942288Z      match follow_db::add_follow(&client, &follower_id, &followed_id).await {
2024-10-14T21:52:25.1943063Z          Ok(_) => HttpResponse::Ok().body("Followed successfully"),
2024-10-14T21:52:25.1943601Z -        
2024-10-14T21:52:25.1943905Z +
2024-10-14T21:52:25.1944290Z          Err(err) => {
2024-10-14T21:52:25.1944677Z              error!("Failed to add follower :{:?}", err);
2024-10-14T21:52:25.1945287Z              return HttpResponse::InternalServerError().body(err.to_string());
2024-10-14T21:52:25.1946555Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/follow_handlers.rs:28:
2024-10-14T21:52:25.1947851Z -        },
2024-10-14T21:52:25.1948171Z +        }
2024-10-14T21:52:25.1948440Z      }
2024-10-14T21:52:25.1948814Z  }
2024-10-14T21:52:25.1949103Z  
2024-10-14T21:52:25.1950404Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/follow_handlers.rs:32:
2024-10-14T21:52:25.1951612Z  // POST /users/{user_id}/unfollow
2024-10-14T21:52:25.1952122Z  pub async fn unfollow_user(
2024-10-14T21:52:25.1952680Z      client: web::Data<Client>, // Access the DynamoDB client from the app state
2024-10-14T21:52:25.1953373Z -    path: web::Path<String>, 
2024-10-14T21:52:25.1953905Z -    req: web::Json<FollowRequest>
2024-10-14T21:52:25.1954346Z +    path: web::Path<String>,
2024-10-14T21:52:25.1954714Z +    req: web::Json<FollowRequest>,
2024-10-14T21:52:25.1955224Z  ) -> HttpResponse {
2024-10-14T21:52:25.1955627Z      let follower_id = path.into_inner();
2024-10-14T21:52:25.1956089Z      let followed_id = req.user_id.clone();
2024-10-14T21:52:25.1957202Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/follow_handlers.rs:47:
2024-10-14T21:52:25.1958454Z  // GET /users/{user_id}/follows
2024-10-14T21:52:25.1958903Z  pub async fn get_user_follows(
2024-10-14T21:52:25.1959473Z      client: web::Data<Client>, // Access the DynamoDB client from the app state
2024-10-14T21:52:25.1960288Z -    path: web::Path<String>
2024-10-14T21:52:25.1960704Z +    path: web::Path<String>,
2024-10-14T21:52:25.1961094Z  ) -> HttpResponse {
2024-10-14T21:52:25.1961572Z      let follower_id = path.into_inner();
2024-10-14T21:52:25.1961987Z  
2024-10-14T21:52:25.1963002Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/follow_handlers.rs:56:
2024-10-14T21:52:25.1964217Z          Err(err) => {
2024-10-14T21:52:25.1964698Z              error!("Failed to add follower :{:?}", err);
2024-10-14T21:52:25.1965321Z              return HttpResponse::InternalServerError().body(err.to_string());
2024-10-14T21:52:25.1965895Z -        },
2024-10-14T21:52:25.1966293Z +        }
2024-10-14T21:52:25.1966598Z      }
2024-10-14T21:52:25.1966855Z  }
2024-10-14T21:52:25.1967216Z  
2024-10-14T21:52:25.1968375Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/follow_handlers.rs:63:
2024-10-14T21:52:25.1969717Z  // POST /users/{user_id}/delete_follower
2024-10-14T21:52:25.1970140Z  pub async fn delete_follower(
2024-10-14T21:52:25.1970791Z      client: web::Data<Client>, // Access the DynamoDB client from the app state
2024-10-14T21:52:25.1971482Z -    path: web::Path<String>, 
2024-10-14T21:52:25.1971963Z -    req: web::Json<FollowRequest>
2024-10-14T21:52:25.1972447Z +    path: web::Path<String>,
2024-10-14T21:52:25.1972851Z +    req: web::Json<FollowRequest>,
2024-10-14T21:52:25.1973275Z  ) -> HttpResponse {
2024-10-14T21:52:25.1973855Z      let followed_id = path.into_inner(); // This is the user who is followed
2024-10-14T21:52:25.1974575Z      let follower_id = req.user_id.clone(); // This is the follower to be removed
2024-10-14T21:52:25.1975841Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/follow_handlers.rs:79:
2024-10-14T21:52:25.1977085Z  // GET /users/{user_id}/followers
2024-10-14T21:52:25.1977538Z  pub async fn get_followers(
2024-10-14T21:52:25.1978099Z      client: web::Data<Client>, // Access the DynamoDB client from the app state
2024-10-14T21:52:25.1978775Z -    path: web::Path<String>
2024-10-14T21:52:25.1979240Z +    path: web::Path<String>,
2024-10-14T21:52:25.1979868Z  ) -> HttpResponse {
2024-10-14T21:52:25.1980224Z      let followed_id = path.into_inner();
2024-10-14T21:52:25.1980712Z  
2024-10-14T21:52:25.1981670Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/follow_handlers.rs:89:
2024-10-14T21:52:25.1982933Z          Err(err) => {
2024-10-14T21:52:25.1983362Z              error!("Failed to add follower :{:?}", err);
2024-10-14T21:52:25.1984012Z              return HttpResponse::InternalServerError().body(err.to_string());
2024-10-14T21:52:25.1984604Z -        },
2024-10-14T21:52:25.1984915Z +        }
2024-10-14T21:52:25.1985302Z      }
2024-10-14T21:52:25.1985594Z  }
2024-10-14T21:52:25.1985844Z  
2024-10-14T21:52:25.1986769Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/handlers.rs:1:
2024-10-14T21:52:25.1988002Z  use actix_web::{web, HttpResponse};
2024-10-14T21:52:25.1988622Z +use aws_sdk_dynamodb::Client;
2024-10-14T21:52:25.1989436Z +use chrono::{Duration, Utc}; // You may leave `Duration` in case it's used for time-based invite restrictions
2024-10-14T21:52:25.1990225Z  use serde::{Deserialize, Serialize};
2024-10-14T21:52:25.1990667Z +use tracing::{error, info};
2024-10-14T21:52:25.1991067Z  use uuid::Uuid;
2024-10-14T21:52:25.1991875Z -use chrono::{Duration, Utc}; // You may leave `Duration` in case it's used for time-based invite restrictions
2024-10-14T21:52:25.1992653Z -use aws_sdk_dynamodb::Client;
2024-10-14T21:52:25.1993087Z -use tracing::{info, error};
2024-10-14T21:52:25.1993523Z  
2024-10-14T21:52:25.1993840Z  use crate::db;
2024-10-14T21:52:25.1994160Z  
2024-10-14T21:52:25.1995066Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/handlers.rs:32:
2024-10-14T21:52:25.1996296Z      }
2024-10-14T21:52:25.1996610Z  }
2024-10-14T21:52:25.1996894Z  
2024-10-14T21:52:25.1997278Z -
2024-10-14T21:52:25.1997589Z  pub async fn register_user(
2024-10-14T21:52:25.1998200Z      client: web::Data<Client>, // Access the DynamoDB client from the app state
2024-10-14T21:52:25.1998939Z -    req: web::Json<RegisterRequest>
2024-10-14T21:52:25.1999405Z +    req: web::Json<RegisterRequest>,
2024-10-14T21:52:25.1999855Z  ) -> HttpResponse {
2024-10-14T21:52:25.2000415Z      // Get the invite from DynamoDB using the provided invite code
2024-10-14T21:52:25.2000968Z      info!("Received register request: {:?}", req);
2024-10-14T21:52:25.2002096Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/handlers.rs:46:
2024-10-14T21:52:25.2003302Z                  error!("Failed to update invite: {:?}", err);
2024-10-14T21:52:25.2004018Z                  return HttpResponse::InternalServerError().body(err.to_string());
2024-10-14T21:52:25.2004569Z              }
2024-10-14T21:52:25.2004889Z -        },
2024-10-14T21:52:25.2005290Z +        }
2024-10-14T21:52:25.2005609Z          Ok(None) => {
2024-10-14T21:52:25.2006086Z              error!("Invalid invite code provided: {}", req.invite_code);
2024-10-14T21:52:25.2006811Z              return HttpResponse::BadRequest().body("Invalid invite code");
2024-10-14T21:52:25.2008529Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/handlers.rs:53:
2024-10-14T21:52:25.2009875Z -        },
2024-10-14T21:52:25.2010196Z +        }
2024-10-14T21:52:25.2010604Z          Err(err) => {
2024-10-14T21:52:25.2011068Z              error!("Failed to fetch invite from DynamoDB: {:?}", err);
2024-10-14T21:52:25.2011712Z              return HttpResponse::InternalServerError().body(err.to_string());
2024-10-14T21:52:25.2012906Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/handlers.rs:66:
2024-10-14T21:52:25.2014101Z      };
2024-10-14T21:52:25.2014402Z  
2024-10-14T21:52:25.2014785Z      match db::save_user(&client, &user).await {
2024-10-14T21:52:25.2015306Z -        Ok(_) =>{
2024-10-14T21:52:25.2015648Z +        Ok(_) => {
2024-10-14T21:52:25.2016092Z              info!("Successfully registered user: {}", user_id);
2024-10-14T21:52:25.2016770Z -            HttpResponse::Ok().json(&user)},
2024-10-14T21:52:25.2017262Z +            HttpResponse::Ok().json(&user)
2024-10-14T21:52:25.2017842Z +        }
2024-10-14T21:52:25.2018242Z          Err(err) => {
2024-10-14T21:52:25.2018707Z              error!("Failed to save user to DynamoDB: {:?}", err);
2024-10-14T21:52:25.2019185Z  
2024-10-14T21:52:25.2020110Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/handlers.rs:75:
2024-10-14T21:52:25.2021355Z -            
2024-10-14T21:52:25.2021931Z -            HttpResponse::InternalServerError().body(err.to_string())},
2024-10-14T21:52:25.2022580Z +            HttpResponse::InternalServerError().body(err.to_string())
2024-10-14T21:52:25.2023168Z +        }
2024-10-14T21:52:25.2023477Z      }
2024-10-14T21:52:25.2023735Z  }
2024-10-14T21:52:25.2024105Z  
2024-10-14T21:52:25.2024948Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/handlers.rs:80:
2024-10-14T21:52:25.2026380Z  pub async fn create_invite(
2024-10-14T21:52:25.2026953Z      client: web::Data<Client>, // Access the DynamoDB client from the app state
2024-10-14T21:52:25.2027693Z -    req: web::Json<InviteRequest>
2024-10-14T21:52:25.2028132Z +    req: web::Json<InviteRequest>,
2024-10-14T21:52:25.2028589Z  ) -> HttpResponse {
2024-10-14T21:52:25.2029034Z      let user_id = req.user_id.clone();
2024-10-14T21:52:25.2029442Z  
2024-10-14T21:52:25.2030346Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/handlers.rs:92:
2024-10-14T21:52:25.2031571Z                  .collect();
2024-10-14T21:52:25.2031995Z  
2024-10-14T21:52:25.2032343Z              if recent_invites.len() >= 5 {
2024-10-14T21:52:25.2033110Z -                return HttpResponse::BadRequest().body("Invite limit exceeded for the last 168 hours");
2024-10-14T21:52:25.2033864Z +                return HttpResponse::BadRequest()
2024-10-14T21:52:25.2034466Z +                    .body("Invite limit exceeded for the last 168 hours");
2024-10-14T21:52:25.2034988Z              }
2024-10-14T21:52:25.2035359Z  
2024-10-14T21:52:25.2035712Z              // Generate a unique invite code
2024-10-14T21:52:25.2036683Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/main.rs:1:
2024-10-14T21:52:25.2037953Z -use lambda_runtime::{service_fn, LambdaEvent, Error};
2024-10-14T21:52:25.2038574Z -use serde_json::{json, Value};
2024-10-14T21:52:25.2039017Z  use aws_sdk_dynamodb::Client;
2024-10-14T21:52:25.2039664Z -use db::{save_user, save_invite, get_dynamodb_client}; // Import your db functions
2024-10-14T21:52:25.2040395Z -use handlers::{register_user, create_invite};
2024-10-14T21:52:25.2041131Z -use follow_handlers::{follow_user, unfollow_user, get_followers, delete_follower};
2024-10-14T21:52:25.2042156Z -use duress_handlers::{trigger_duress, cancel_duress, enable_test_mode, get_map_info, get_preferences, update_preferences};
2024-10-14T21:52:25.2043115Z -use tracing::{info, error};
2024-10-14T21:52:25.2043692Z +use db::{get_dynamodb_client, save_invite, save_user}; // Import your db functions
2024-10-14T21:52:25.2044289Z  use dotenv::dotenv;
2024-10-14T21:52:25.2044692Z +use duress_handlers::{
2024-10-14T21:52:25.2045239Z +    cancel_duress, enable_test_mode, get_map_info, get_preferences, trigger_duress,
2024-10-14T21:52:25.2045843Z +    update_preferences,
2024-10-14T21:52:25.2046276Z +};
2024-10-14T21:52:25.2046728Z +use follow_handlers::{delete_follower, follow_user, get_followers, unfollow_user};
2024-10-14T21:52:25.2047367Z +use handlers::{create_invite, register_user};
2024-10-14T21:52:25.2048479Z +use lambda_runtime::{service_fn, Error, LambdaEvent};
2024-10-14T21:52:25.2049104Z +use serde_json::{json, Value};
2024-10-14T21:52:25.2049637Z +use tracing::{error, info};
2024-10-14T21:52:25.2050010Z  
2024-10-14T21:52:25.2050324Z -mod handlers;
2024-10-14T21:52:25.2050737Z  mod db;
2024-10-14T21:52:25.2051082Z -mod follow_handlers;
2024-10-14T21:52:25.2051436Z  mod duress_db;
2024-10-14T21:52:25.2051835Z  mod duress_handlers;
2024-10-14T21:52:25.2052202Z  mod follow_db;
2024-10-14T21:52:25.2053191Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/main.rs:17:
2024-10-14T21:52:25.2054333Z +mod follow_handlers;
2024-10-14T21:52:25.2054983Z +mod handlers;
2024-10-14T21:52:25.2055273Z  
2024-10-14T21:52:25.2055594Z  #[tokio::main]
2024-10-14T21:52:25.2056080Z  async fn main() -> Result<(), Error> {
2024-10-14T21:52:25.2057028Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/main.rs:39:
2024-10-14T21:52:25.2058447Z  async fn handle_request(event: Value, client: Client) -> Value {
2024-10-14T21:52:25.2059080Z      // Parse the event and route it to the appropriate handler
2024-10-14T21:52:25.2059609Z      match event["path"].as_str() {
2024-10-14T21:52:25.2060147Z -        Some("/register") => {
2024-10-14T21:52:25.2060642Z -            register_user(client, event).await
2024-10-14T21:52:25.2061166Z -        },
2024-10-14T21:52:25.2061514Z -        Some("/invite") => {
2024-10-14T21:52:25.2061978Z -            create_invite(client, event).await
2024-10-14T21:52:25.2062694Z -        },
2024-10-14T21:52:25.2063130Z +        Some("/register") => register_user(client, event).await,
2024-10-14T21:52:25.2063718Z +        Some("/invite") => create_invite(client, event).await,
2024-10-14T21:52:25.2064318Z          Some(path) if path.starts_with("/users") => {
2024-10-14T21:52:25.2064975Z              // Handle other user-related routes like follow, unfollow, etc.
2024-10-14T21:52:25.2065553Z              // Similar logic for other handlers
2024-10-14T21:52:25.2066575Z ##[warning]Diff in /home/runner/work/cherubgyre/cherubgyre/src/main.rs:51:
2024-10-14T21:52:25.2067866Z              json!({ "message": "Handling user routes" })
2024-10-14T21:52:25.2068340Z -        },
2024-10-14T21:52:25.2068657Z +        }
2024-10-14T21:52:25.2069057Z          _ => json!({
2024-10-14T21:52:25.2069422Z              "statusCode": 404,
2024-10-14T21:52:25.2069849Z              "body": "Not Found"
2024-10-14T21:52:25.2074340Z ##[error]Process completed with exit code 1.
